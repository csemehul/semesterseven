# Function to generate a repeating key to match the length of the message
def generateKey(message, key):
    key = list(key)
    if len(message) == len(key):
        return "".join(key)
    else:
        for i in range(len(message) - len(key)):
            key.append(key[i % len(key)])
    return "".join(key)

# Function to encrypt the message using the Vigen√®re cipher
def encrypt(message, key):
    encrypted_text = []
    key = generateKey(message, key)
    for i in range(len(message)):
        if message[i].isalpha():  # Only encrypt alphabetic characters
            shift = (ord(message[i].upper()) + ord(key[i].upper())) % 26
            encrypted_char = chr(shift + ord('A'))
            if message[i].islower():
                encrypted_text.append(encrypted_char.lower())
            else:
                encrypted_text.append(encrypted_char)
        else:
            encrypted_text.append(message[i])  # Keep non-alphabetic characters unchanged
    return "".join(encrypted_text)

# Function to decrypt the encrypted message
def decrypt(encrypted_text, key):
    decrypted_text = []
    key = generateKey(encrypted_text, key)
    for i in range(len(encrypted_text)):
        if encrypted_text[i].isalpha():  # Only decrypt alphabetic characters
            shift = (ord(encrypted_text[i].upper()) - ord(key[i].upper()) + 26) % 26
            decrypted_char = chr(shift + ord('A'))
            if encrypted_text[i].islower():
                decrypted_text.append(decrypted_char.lower())
            else:
                decrypted_text.append(decrypted_char)
        else:
            decrypted_text.append(encrypted_text[i])  # Keep non-alphabetic characters unchanged
    return "".join(decrypted_text)

# Example usage
key = input("Enter the key: ")
message = input("Enter the message: ")

encrypted_message = encrypt(message, key)
print(f'Encrypted Message: {encrypted_message}')

decrypted_message = decrypt(encrypted_message, key)
print(f'Decrypted Message: {decrypted_message}')
