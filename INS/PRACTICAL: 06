def encrypt_rail_fence(text, key):
    # Create the rail matrix
    rail = [['\n' for _ in range(len(text))] for _ in range(key)]

    # To determine direction of filling
    dir_down = False
    row, col = 0, 0

    # Fill the rail matrix in zigzag fashion
    for i in range(len(text)):
        # Check the direction of filling
        if row == 0 or row == key - 1:
            dir_down = not dir_down

        # Place the character
        rail[row][col] = text[i]
        col += 1

        # Move to the next row
        row += 1 if dir_down else -1

    # Construct the encrypted message by reading the rail matrix
    result = ''
    for i in range(key):
        for j in range(len(text)):
            if rail[i][j] != '\n':
                result += rail[i][j]
    
    return result


def decrypt_rail_fence(cipher, key):
    # Create the rail matrix
    rail = [['\n' for _ in range(len(cipher))] for _ in range(key)]

    # To determine direction of filling
    dir_down = None
    row, col = 0, 0

    # Mark the positions where characters will be placed
    for i in range(len(cipher)):
        if row == 0 or row == key - 1:
            dir_down = not dir_down
        rail[row][col] = '*'
        col += 1
        row += 1 if dir_down else -1

    # Fill the rail matrix with the actual cipher text
    index = 0
    for i in range(key):
        for j in range(len(cipher)):
            if rail[i][j] == '*' and index < len(cipher):
                rail[i][j] = cipher[index]
                index += 1

    # Now read the matrix in zigzag manner to reconstruct the original message
    result = ''
    row, col = 0, 0
    dir_down = None
    for i in range(len(cipher)):
        if row == 0 or row == key - 1:
            dir_down = not dir_down
        result += rail[row][col]
        col += 1
        row += 1 if dir_down else -1
    
    return result


# Example usage
if __name__ == "__main__":
    text = "mehulsinghrajput"
    key = 2
    print("Original Text:", text)

    encrypted = encrypt_rail_fence(text, key)
    print("Encrypted Text:", encrypted)

    decrypted = decrypt_rail_fence(encrypted, key)
    print("Decrypted Text:", decrypted)
