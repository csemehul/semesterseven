import re

# Function to create the Playfair cipher matrix based on the key
def create_matrix(key):
    key = key.upper().replace('J', 'I')  # Replace 'J' with 'I'
    key = "".join(sorted(set(key), key=key.index))  # Remove duplicates while preserving order
    alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"  # Playfair alphabet (without 'J')
    
    # Create a matrix for the Playfair cipher
    matrix = []
    for char in key:
        if char in alphabet:
            alphabet = alphabet.replace(char, '')  # Remove key characters from the alphabet
            matrix.append(char)
    
    # Append remaining characters of the alphabet to the matrix
    for char in alphabet:
        matrix.append(char)
    
    return [matrix[i:i + 5] for i in range(0, 25, 5)]  # 5x5 matrix

# Function to preprocess the text (removing non-alphabet characters and adding 'X' where necessary)
def preprocess_text(text):
    text = text.upper().replace('J', 'I')
    text = re.sub(r'[^A-Z]', '', text)  # Remove non-alphabet characters
    processed_text = ""
    i = 0
    
    # Add 'X' between repeated letters and make the text length even
    while i < len(text):
        processed_text += text[i]
        if i + 1 < len(text) and text[i] == text[i + 1]:
            processed_text += 'X'
        i += 1
    
    if len(processed_text) % 2 != 0:
        processed_text += 'X'  # Add 'X' if the length of the text is odd
    
    return processed_text

# Function to find the position of a character in the matrix
def find_position(char, matrix):
    for row in range(5):
        for col in range(5):
            if matrix[row][col] == char:
                return row, col
    return None

# Function to encrypt a digraph (pair of letters)
def encrypt_digraph(digraph, matrix):
    row1, col1 = find_position(digraph[0], matrix)
    row2, col2 = find_position(digraph[1], matrix)
    
    if row1 == row2:
        return matrix[row1][(col1 + 1) % 5] + matrix[row2][(col2 + 1) % 5]  # Same row, shift right
    elif col1 == col2:
        return matrix[(row1 + 1) % 5][col1] + matrix[(row2 + 1) % 5][col2]  # Same column, shift down
    else:
        return matrix[row1][col2] + matrix[row2][col1]  # Rectangle swap

# Function to decrypt a digraph (pair of letters)
def decrypt_digraph(digraph, matrix):
    row1, col1 = find_position(digraph[0], matrix)
    row2, col2 = find_position(digraph[1], matrix)
    
    if row1 == row2:
        return matrix[row1][(col1 - 1) % 5] + matrix[row2][(col2 - 1) % 5]  # Same row, shift left
    elif col1 == col2:
        return matrix[(row1 - 1) % 5][col1] + matrix[(row2 - 1) % 5][col2]  # Same column, shift up
    else:
        return matrix[row1][col2] + matrix[row2][col1]  # Rectangle swap

# Function to encrypt plaintext using the Playfair cipher
def playfair_encrypt(plaintext, key):
    matrix = create_matrix(key)
    plaintext = preprocess_text(plaintext)
    ciphertext = ""
    
    for i in range(0, len(plaintext), 2):
        ciphertext += encrypt_digraph(plaintext[i:i + 2], matrix)
    
    return ciphertext

# Function to decrypt ciphertext using the Playfair cipher
def playfair_decrypt(ciphertext, key):
    matrix = create_matrix(key)
    plaintext = ""
    
    for i in range(0, len(ciphertext), 2):
        plaintext += decrypt_digraph(ciphertext[i:i + 2], matrix)
    
    return plaintext

# Main program to test Playfair cipher
if __name__ == "__main__":
    key = "playfairexample"
    plaintext = "Hide the gold in the tree stump"
    
    ciphertext = playfair_encrypt(plaintext, key)
    decrypted_text = playfair_decrypt(ciphertext, key)
    
    print("Plaintext:", plaintext)
    print("Ciphertext:", ciphertext)
    print("Decrypted Text:", decrypted_text)
